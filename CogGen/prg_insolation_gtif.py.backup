import numpy as np
import h5py as h5
import sys
import os
from osgeo import gdal
from osgeo import osr
import pyproj
from watchdog.observers.polling import PollingObserver
from watchdog.events import FileSystemEventHandler
import time
import re
from datetime import datetime
#from geos_gtif import create_geotif
import cartopy.io.shapereader as shpreader
from cartopy.feature import ShapelyFeature
import cartopy, cartopy.crs as ccrs
import configparser
import time

logs_dir = '/usr/local/logs/CogGen'

def write_log(rule,message,level='INFO'):
    log_file_name = get_dynamic_log_file_name(rule)
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f'{timestamp} - {level} - {rule} - {message}\n'
    with open(log_file_name,'a') as log_file:
        log_file.write(log_entry)
    log_file.close()

def get_dynamic_log_file_name(rule='COGGEN'):
    now = datetime.now()
    #print('----',os.getcwd())
    return os.path.join(logs_dir,f'{rule}_log_{now.strftime("%Y%m%d")}.log')

class EventHandler(FileSystemEventHandler):

    #product_code = ['DHI','DNI','GHI','INS','GHI_DLY','DNI_DLY','DHI_DLY','INS_DLY','HEM_DLY','AOD']
    Months       = {'JAN':1,'FEB':2,'MAR':3,'APR':4,'MAY':5,'JUN':6,'JUL':7,'AUG':8,'SEP':9,'OCT':10,'NOV':11,'DEC':12}
    #opath_3r = {'DHI':['T2','T2S1','T2S1P1'],'DNI':['T2','T2S1','T2S1P2'],'GHI':['T2','T2S1','T2S1P3'],'INS':['T2','T2S1','T2S1P4'],'DNI_DLY':['T2','T2S1','insat3r_dni_daily_T2S1P10'],'DHI_DLY':['T2','T2S1','insat3r_dhi_daily_T2S1P11'],'INS_DLY':['T2','T2S1','insat3r_ins_daily_T2S1P6'],'GHI_DLY':['T2','T2S1','insat3r_ghi_daily_T2S1P7'],'HEM_DLY':['T5','T5S3','insat_hem_daily_T5S3P5'],'LST':['T5','T5S2','land_surface_temperature_insat3r_T5S2P3'],'AOD':['T5','T5S1','aod_T5S1P8']}
    #opath_3d = {'DNI_DLY':['T2S1','insat3d_dni_daily_T2S1P9'],'DHI_DLY':['T2S1','insat3d_dhi_daily_T2S1P12'],'INS_DLY':['T2S1','insat3d_ins_daily_T2S1P5'],'GHI_DLY':['T2S1','insat3d_ghi_daily_T2S1P8']}
    #opath_3s ={'DHI':['T2','T2S1','DHI_3S_T2S1P13'],'DNI':['T2','T2S1','DNI_3S_T2S1P14'],'GHI':['T2','T2S1','GHI_3S_T2S1P15'],
#'INS':['T2','T2S1','INS_3S_T2S1P16'],'DNI_DLY':['T2','T2S1','DNI_DLY_3S_T2S1P18'],'DHI_DLY':['T2','T2S1','DHI_DLY_3S_T2S1P19'],'INS_DLY':['T2','T2S1','INS_DLY_3S_T2S1P21'],'GHI_DLY':['T2','T2S1','GHI_DLY_3S_T2S1P17'],'HEM_DLY':['T5','T5S3','HEM_DLY_3S_T2S1P20'],'LST':['T5','T5S2','LST_3S_T2S1P23'],'AOD':['T5','T5S1','AOD_3S_T2S1P22']}
    #lpp_code = ['L1C','L2C','L3C','L2B','L3B','L2G']
    #sat_code = ['3RIMG','3DIMG','3SIMG']

    def __init__(self,outputdir,product_code,lpp_code,sat_code):
        self.outputdir = outputdir 
        self.product_code = product_code
        self.lpp_code = lpp_code
        self.sat_code = sat_code

    def create_directory(self,filename,scode):
        pattern = r'_(\d{2})([A-Z]{3})(\d{4})_(\d{4})_'     #_29MAR2024_0000_
        pattern2 = r'^([^_]+_){4}'                          #3DIMG_29MAR2024_0000_L3B_
        pattern3 = r'^([^_]+){1}'                           #3DIMG
        pattern4 = r'V(\d{2})R(\d{2})'                      #V01R00

        mtch = re.search(pattern,filename)
        mtch_2 = re.search(pattern2,filename)
        mtch_3 = re.search(pattern3,filename)
        mtch_4 = re.search(pattern4,filename)
        
        if 'L1C' in filename:
            sector_name = re.search(r'L1C_(.*?)_V',filename).group(1)

        dirpath = None
        if mtch :
            DD,MMM,YYYY,HHMM = mtch.groups()	
            dt = datetime.strptime(str.format('%s%s%s%s'%(DD,MMM,YYYY,HHMM)),'%d%b%Y%H%M')
            
            if mtch_3.group(0) in self.sat_code:
                dirpath = os.path.join(self.outputdir,mtch_3.group(0),str(YYYY),'%.2d'%(self.Months[MMM]),'%.2d'%(int(DD)))

            os.makedirs(dirpath,exist_ok=True)
            tmstr = str.format('%s%.2d%.2d%sP%s'%(YYYY,self.Months[MMM],int(DD),HHMM,HHMM))
            tfilename = f"{mtch_2.group(0)}{scode}_{mtch_4.group(0)}.tif"
            if 'L1C' in filename:
                tfilename = f"{mtch_2.group(0)}{sector_name}_{scode}_{mtch_4.group(0)}.tif"
						
        return dirpath,tfilename

    def on_created(self, event):
        print(f"on_created: {str(event.src_path)}")
        fl_basename = os.path.basename(str(event.src_path))
        fl, ext = os.path.splitext(fl_basename)

        if ext != '.h5':
            return
      
        last_size = -1
        while True:
            csize = os.path.getsize(str(event.src_path))
            if csize == last_size:
                break;
            last_size = csize
            time.sleep(2)

        datasets = self.getdatasetlist(str(event.src_path))

        if len(datasets)== 0:
            return
        plevel   = self.getprocessinglevel(str(event.src_path))
        
        for code in self.product_code:
            if code in datasets: 
                dirpath,tfilename = self.create_directory(fl,code)
                tfl = os.path.join(dirpath,tfilename)
                #if code == 'HEM_DLY' or code == 'LST':
                if plevel in ['L1B','L2B','L3B']:
                    write_log('COGGEN',f"Watchdog received moved event - {event.src_path}", level='INFO')
                    create_geotif(str(event.src_path),code,tfl)
                    write_log('COGGEN',f'Successfully written: {tfl}','INFO')
                #elif code == 'AOD':
                elif plevel in ['L2G','L3G']:
                    write_log('COGGEN',f"Watchdog received moved event - {event.src_path}", level='INFO')
                    create_gridded_geotif(str(event.src_path),code,tfl)
                    write_log('COGGEN',f'Successfully written: {tfl}','INFO')
                else:
                    #dirpath,tfilename = self.create_directory(fl,code)
                    #tfl = os.path.join(dirpath,tfilename)
                    write_log('COGGEN',f"Watchdog received moved event - {event.src_path}", level='INFO')
                    write_toa_geotiff(str(event.src_path),code,tfl)
                    write_log('COGGEN',f'Successfully written: {tfl}','INFO')
			
    def on_moved(self, event):

        fl_basename = os.path.basename(str(event.src_path))
        fl, ext = os.path.splitext(fl_basename)
        datasets = self.getdatasetlist(str(event.src_path))

        for code in self.product_code:
            if code in datasets:
                dirpath,tfilename = self.create_directory(fl,code)
                tfl = os.path.join(dirpath,tfilename)
                write_log('COGGEN',f"Watchdog received moved event - {event.src_path}", level='INFO')
                write_toa_geotiff(str(event.src_path),code,tfl)
                write_log('COGGEN',f'Successfully written: {tfl}','INFO')

    def getdatasetlist(self,filename):
        bfilename = os.path.basename(filename)
        datasets = []
        for code in self.lpp_code:
            if code in bfilename:
                ds = h5.File(filename,'r')
                datasets = list(ds.keys())
                ds.close()
        return datasets

    def getprocessinglevel(self,filename):
        #bfilename = os.path.basename(filename)
        file_attrs = {}
        ds = h5.File(filename,'r')
        file_attrs.update(ds.attrs)
        ds.close()
        return file_attrs['Processing_Level'].astype(str)

def get_corner_cordinates(l1c_hdf,dataset):

    write_log('COGGEN',f'reading {l1c_hdf} dataset: {dataset}','INFO')
    proj_param = {}
    band_attrs = {}
    band = None
    try:
        dst_h5 = h5.File(l1c_hdf,'r')
        bnd = dst_h5.get(dataset)
        band_attrs.update(bnd.attrs)
        band    = np.squeeze(bnd[()])
        dst_proj = dst_h5.get('Projection_Information')
        dst_proj = dst_proj.attrs
        proj_param.update(dst_proj)
        dst_h5.close()
    except Exception as e:
        write_log('COGGEN',f'Exception in opening {l1c_hdf}-{str(e)}','ERROR')
        dst_h5.close()

    return proj_param,band_attrs,band

def conver_lonlat_to_xy(proj_param,step=0):
    	
    clat = proj_param['standard_parallel'][0]
    clon = proj_param['longitude_of_projection_origin'][0]
    fe   = proj_param['false_easting'][0]
    fn   = proj_param['false_northing'][0]
    grid_mapping_name = proj_param['grid_mapping_name']
    if step == 0:
        lat,lon  = proj_param['upper_left_lat_lon(degrees)']
    elif step == 1:
        lat,lon  = proj_param['lower_right_lat_lon(degrees)']
        write_log('COGGEN',f"Lower right corner: Latitude {lat}, Longitude {lon}", level='INFO')

    write_log('COGGEN',f"Central Latitude: {clat}, Central Longitude: {clon}", level='INFO')
    bmap = pyproj.Proj(proj="merc",lat_ts=clat,lon_0=clon,ellps="WGS84")
    crs = pyproj.CRS.from_proj4(bmap.to_proj4())

    return  bmap(lon,lat,inverse=False),crs.to_wkt()

def write_toa_geotiff(l3c_hdf_filename,dataset,l3c_geotiff_filename):

    proj_param,band_attrs,band = get_corner_cordinates(l3c_hdf_filename,dataset)
    
    print(f'----{len(proj_param.keys())} {len(band_attrs.keys())}')
    if len(proj_param.keys()) == 0 or len(band_attrs.keys()) == 0:
        write_log('COGGEN',f'file {l3c_hdf_filename} either corrupted or {dataset} missing','ERROR')
        return

    dst_ul_xy,wkt = conver_lonlat_to_xy(proj_param)
    dst_lr_xy,wkt = conver_lonlat_to_xy(proj_param,1)

    write_log('COGGEN',f"Upper-left corner (x, y): {dst_ul_xy[0]}, {dst_ul_xy[1]}", level='INFO')
    write_log('COGGEN',f"Lower-right corner (x, y): {dst_lr_xy[0]}, {dst_lr_xy[1]}", level='INFO')
    write_log('COGGEN',f"Band shape: {band.shape}", level='INFO')	

    we_pixel_resolution = dst_lr_xy[0] - dst_ul_xy[0]
    ns_pixel_resolution  = dst_ul_xy[1] - dst_lr_xy[1]

    nscan,npix = band.shape

    xres = we_pixel_resolution/npix
    yres = -ns_pixel_resolution/nscan

    write_log('COGGEN',f"xres: {xres}, yres: {yres}", level='INFO')
    write_log('COGGEN',f"nscan: {nscan}, npix: {npix}", level='INFO')

    drv = gdal.GetDriverByName( 'GTiff' )
    dst_ds = drv.Create(l3c_geotiff_filename, npix,nscan,1, gdal.GDT_Float32 )
    dst_ds.SetProjection(wkt)
    dst_ds.SetGeoTransform([dst_ul_xy[0],xres,0.0,dst_ul_xy[1],0.0,yres])
    b1 = dst_ds.GetRasterBand(1)
    b1.SetNoDataValue(int(band_attrs['_FillValue'][0]))
    b1.WriteArray(band)
    dst_ds = None

def create_geotif(hdf_filename,dataset,geotiff_filename):

    inpfl,ext = os.path.splitext(os.path.basename(hdf_filename))


    file = h5.File(hdf_filename)
    dset = file.get(dataset)
    dset_attr = dset.attrs
    NoDataValue = dset_attr['_FillValue'][0]
    dset = np.squeeze(dset[()])
    dset = dset[57:2759,47:2757]
    file.close()
    
    chain = inpfl[0:5]
    globe = ccrs.Globe(semimajor_axis=6378137.0,semiminor_axis=6356752.31414)
    if chain == '3DIMG' or chain == '3SIMG':
        proj = ccrs.Geostationary(central_longitude=82.0,satellite_height=35785831,false_easting=0,false_northing=0,sweep_axis='x',globe=globe)
    if chain == '3RIMG' :
        proj = ccrs.Geostationary(central_longitude=74.0,satellite_height=35785831,false_easting=0,false_northing=0,sweep_axis='x',globe=globe)

    geos = osr.SpatialReference()
    geos.SetWellKnownGeogCS('WGS84')
    geos.SetProjCS("GEOS")
    geos.ImportFromProj4(proj.proj4_init)
    wkt = geos.ExportToWkt()

    drv = gdal.GetDriverByName('MEM')

    dst_ds = drv.Create("", dset.shape[1],dset.shape[0],1, gdal.GDT_Float32 )
    dst_ds.SetProjection(wkt)
    xres = (proj.x_limits[1] - proj.x_limits[0])/dset.shape[1]
    yres = (proj.y_limits[1] - proj.y_limits[0])/dset.shape[0]


    dst_ds.SetGeoTransform([proj.x_limits[1],xres,0.0,proj.y_limits[0],0.0,-yres])
    b1 = dst_ds.GetRasterBand(1)
    b1.WriteArray(dset)
    b1.SetNoDataValue(int(NoDataValue))
    
    temp_dir = '/tmp'
    inter_gtif = os.path.join(temp_dir,'%s_OUT.tif'%(inpfl))

    print(f'{inter_gtif} {geotiff_filename}')

    ds = gdal.Translate(inter_gtif, dst_ds, outputBounds = [proj.x_limits[0],proj.y_limits[1],proj.x_limits[1],proj.y_limits[0]],resampleAlg="near",noData=NoDataValue)

    ws = gdal.Warp(geotiff_filename, ds, dstSRS='EPSG:4326',xRes=0.03636,yRes=0.03636,resampleAlg="near",srcNodata=NoDataValue,dstNodata=NoDataValue)
    ds = None
    ws = None
    file.close()
    os.remove(inter_gtif)

def create_gridded_geotif(hdf_filename,dataset,geotiff_filename):
    fl = h5.File(hdf_filename)
    fl_attrs = {}
    fl_attrs.update(fl.attrs)
    ds = fl.get(dataset)[()]
    ds = np.squeeze(ds)
    ds_attrs = {}

    ds_attrs.update(fl.get(dataset).attrs)

    fl.close()
    drv = gdal.GetDriverByName( 'GTiff' )

    dst_ds = drv.Create(geotiff_filename, ds.shape[1],ds.shape[0],1, gdal.GDT_Float32 )


    dst_ds.SetProjection('EPSG:4326')
    dst_ds.SetGeoTransform([fl_attrs['left_longitude'][0],fl_attrs['lon_interval'][0],0.0,fl_attrs['upper_latitude'][0],0.0,-fl_attrs['lat_interval'][0]])
    b1 = dst_ds.GetRasterBand(1)
    b1.SetNoDataValue(int(ds_attrs['_FillValue'][0]))
    b1.WriteArray(ds)
    dst_ds = None
    
def main():

    if (len(sys.argv) < 2):
        print(f"Usage {sys.argv[0]} <config.ini>")
        sys.exit(1)

    config = configparser.ConfigParser()
    config.read(sys.argv[1])

    watch_dirs = config['COG_GENERATION']['WATCH_DIR'].split(',')  # All but the last argument are input directories
    output_dir = config['COG_GENERATION']['OUTPUT_DIR']  # The last argument is the output directory
    sat_codes  = config['COG_GENERATION']['SAT_CODES'].split(',')
    lpp_codes   = config['COG_GENERATION']['LPP_CODES'].split(',')
    product_codes = config['COG_GENERATION']['PRODUCT_CODES'].split(',')
    logs_dir = config['COG_GENERATION']['LOGS']

    event_handler = EventHandler(output_dir,product_codes,lpp_codes,sat_codes)
    observer = PollingObserver()
    for watch_dir in watch_dirs:
        observer.schedule(event_handler, watch_dir, recursive=True)
    observer.start()
    print(f"Monitoring of  {watch_dirs} started")
    try:
        while True:
            time.sleep(0.5)
    except KeyboardInterrupt:
        observer.stop()
        observer.join()

if __name__ == "__main__":
    main()
